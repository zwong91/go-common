// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: app/service/main/archive/model/archive/bvc.proto

package archive

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// !!!Note: only response message defined, since we put pb into http response body
type VideoFileInfo struct {
	Filesize             int64    `protobuf:"varint,1,opt,name=filesize,proto3,casttype=int64" json:"filesize"`
	Timelength           int64    `protobuf:"varint,2,opt,name=timelength,proto3,casttype=int64" json:"timelength"`
	Ahead                string   `protobuf:"bytes,3,opt,name=ahead,proto3" json:"ahead"`
	Vhead                string   `protobuf:"bytes,4,opt,name=vhead,proto3" json:"vhead"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VideoFileInfo) Reset()         { *m = VideoFileInfo{} }
func (m *VideoFileInfo) String() string { return proto.CompactTextString(m) }
func (*VideoFileInfo) ProtoMessage()    {}
func (*VideoFileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_39fbe85861dc2a32, []int{0}
}
func (m *VideoFileInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoFileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoFileInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoFileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoFileInfo.Merge(m, src)
}
func (m *VideoFileInfo) XXX_Size() int {
	return m.Size()
}
func (m *VideoFileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoFileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VideoFileInfo proto.InternalMessageInfo

type VideoFormatFileInfo struct {
	Infos                []*VideoFileInfo `protobuf:"bytes,1,rep,name=infos,proto3" json:"infos"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *VideoFormatFileInfo) Reset()         { *m = VideoFormatFileInfo{} }
func (m *VideoFormatFileInfo) String() string { return proto.CompactTextString(m) }
func (*VideoFormatFileInfo) ProtoMessage()    {}
func (*VideoFormatFileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_39fbe85861dc2a32, []int{1}
}
func (m *VideoFormatFileInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VideoFormatFileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VideoFormatFileInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VideoFormatFileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VideoFormatFileInfo.Merge(m, src)
}
func (m *VideoFormatFileInfo) XXX_Size() int {
	return m.Size()
}
func (m *VideoFormatFileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VideoFormatFileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VideoFormatFileInfo proto.InternalMessageInfo

type DashItem struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3,casttype=int64" json:"id"`
	BaseUrl              string   `protobuf:"bytes,2,opt,name=baseUrl,proto3" json:"base_url"`
	Bandwidth            int64    `protobuf:"varint,3,opt,name=bandwidth,proto3,casttype=int64" json:"bandwidth"`
	Codecid              int64    `protobuf:"varint,4,opt,name=codecid,proto3,casttype=int64" json:"codecid"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DashItem) Reset()         { *m = DashItem{} }
func (m *DashItem) String() string { return proto.CompactTextString(m) }
func (*DashItem) ProtoMessage()    {}
func (*DashItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_39fbe85861dc2a32, []int{2}
}
func (m *DashItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DashItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DashItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DashItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DashItem.Merge(m, src)
}
func (m *DashItem) XXX_Size() int {
	return m.Size()
}
func (m *DashItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DashItem.DiscardUnknown(m)
}

var xxx_messageInfo_DashItem proto.InternalMessageInfo

type ResponseDash struct {
	Video                []*DashItem `protobuf:"bytes,1,rep,name=video,proto3" json:"video"`
	Audio                []*DashItem `protobuf:"bytes,2,rep,name=audio,proto3" json:"audio"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ResponseDash) Reset()         { *m = ResponseDash{} }
func (m *ResponseDash) String() string { return proto.CompactTextString(m) }
func (*ResponseDash) ProtoMessage()    {}
func (*ResponseDash) Descriptor() ([]byte, []int) {
	return fileDescriptor_39fbe85861dc2a32, []int{3}
}
func (m *ResponseDash) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResponseDash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResponseDash.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResponseDash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseDash.Merge(m, src)
}
func (m *ResponseDash) XXX_Size() int {
	return m.Size()
}
func (m *ResponseDash) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseDash.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseDash proto.InternalMessageInfo

type BvcVideoItem struct {
	ExpireTime           int64                           `protobuf:"varint,1,opt,name=expire_time,json=expireTime,proto3,casttype=int64" json:"expire_time"`
	Cid                  int64                           `protobuf:"varint,2,opt,name=cid,proto3,casttype=int64" json:"cid"`
	SupportQuality       []int                           `protobuf:"varint,3,rep,packed,name=support_quality,json=supportQuality,proto3,casttype=int" json:"support_quality"`
	SupportFormats       []string                        `protobuf:"bytes,4,rep,name=support_formats,json=supportFormats,proto3" json:"support_formats"`
	SupportDescription   []string                        `protobuf:"bytes,5,rep,name=support_description,json=supportDescription,proto3" json:"support_description"`
	Quality              int                             `protobuf:"varint,6,opt,name=quality,proto3,casttype=int" json:"quality"`
	Url                  string                          `protobuf:"bytes,7,opt,name=url,proto3" json:"url"`
	FileInfo             map[uint32]*VideoFormatFileInfo `protobuf:"bytes,8,rep,name=file_info,json=fileInfo,proto3" json:"file_info" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VideoCodecid         uint32                          `protobuf:"varint,9,opt,name=video_codecid,json=videoCodecid,proto3" json:"video_codecid"`
	VideoProject         bool                            `protobuf:"varint,10,opt,name=video_project,json=videoProject,proto3" json:"video_project"`
	Fnver                int                             `protobuf:"varint,11,opt,name=fnver,proto3,casttype=int" json:"fnver"`
	Fnval                int                             `protobuf:"varint,12,opt,name=fnval,proto3,casttype=int" json:"fnval"`
	Dash                 *ResponseDash                   `protobuf:"bytes,13,opt,name=dash,proto3" json:"dash"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *BvcVideoItem) Reset()         { *m = BvcVideoItem{} }
func (m *BvcVideoItem) String() string { return proto.CompactTextString(m) }
func (*BvcVideoItem) ProtoMessage()    {}
func (*BvcVideoItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_39fbe85861dc2a32, []int{4}
}
func (m *BvcVideoItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BvcVideoItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BvcVideoItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BvcVideoItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BvcVideoItem.Merge(m, src)
}
func (m *BvcVideoItem) XXX_Size() int {
	return m.Size()
}
func (m *BvcVideoItem) XXX_DiscardUnknown() {
	xxx_messageInfo_BvcVideoItem.DiscardUnknown(m)
}

var xxx_messageInfo_BvcVideoItem proto.InternalMessageInfo

type BvcResponseMsg struct {
	Code                 int64                    `protobuf:"varint,1,opt,name=code,proto3,casttype=int64" json:"code"`
	Data                 map[uint32]*BvcVideoItem `protobuf:"bytes,2,rep,name=data,proto3" json:"data" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *BvcResponseMsg) Reset()         { *m = BvcResponseMsg{} }
func (m *BvcResponseMsg) String() string { return proto.CompactTextString(m) }
func (*BvcResponseMsg) ProtoMessage()    {}
func (*BvcResponseMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_39fbe85861dc2a32, []int{5}
}
func (m *BvcResponseMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BvcResponseMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BvcResponseMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BvcResponseMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BvcResponseMsg.Merge(m, src)
}
func (m *BvcResponseMsg) XXX_Size() int {
	return m.Size()
}
func (m *BvcResponseMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_BvcResponseMsg.DiscardUnknown(m)
}

var xxx_messageInfo_BvcResponseMsg proto.InternalMessageInfo

func init() {
	proto.RegisterType((*VideoFileInfo)(nil), "archive.VideoFileInfo")
	proto.RegisterType((*VideoFormatFileInfo)(nil), "archive.VideoFormatFileInfo")
	proto.RegisterType((*DashItem)(nil), "archive.DashItem")
	proto.RegisterType((*ResponseDash)(nil), "archive.ResponseDash")
	proto.RegisterType((*BvcVideoItem)(nil), "archive.BvcVideoItem")
	proto.RegisterMapType((map[uint32]*VideoFormatFileInfo)(nil), "archive.BvcVideoItem.FileInfoEntry")
	proto.RegisterType((*BvcResponseMsg)(nil), "archive.BvcResponseMsg")
	proto.RegisterMapType((map[uint32]*BvcVideoItem)(nil), "archive.BvcResponseMsg.DataEntry")
}

func init() {
	proto.RegisterFile("app/service/main/archive/model/archive/bvc.proto", fileDescriptor_39fbe85861dc2a32)
}

var fileDescriptor_39fbe85861dc2a32 = []byte{
	// 850 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0xae, 0xe3, 0x64, 0x93, 0x9c, 0xc4, 0xfd, 0x99, 0xed, 0x16, 0xb3, 0x42, 0x71, 0x08, 0xa2,
	0x8a, 0x04, 0x24, 0xb0, 0xad, 0x5a, 0x40, 0x48, 0x48, 0xee, 0x82, 0xe8, 0x05, 0x05, 0x2c, 0x40,
	0xe2, 0x2a, 0x9a, 0xd8, 0x93, 0x64, 0xc0, 0xb1, 0x8d, 0x3d, 0x36, 0x2c, 0xcf, 0xc3, 0x4b, 0x70,
	0xc1, 0xfd, 0x5e, 0xf6, 0x09, 0x2c, 0xba, 0x97, 0x7e, 0x84, 0x5e, 0xa1, 0x39, 0xe3, 0xbf, 0xac,
	0x56, 0xbd, 0xf1, 0xf8, 0x7c, 0xe7, 0x9c, 0x89, 0xbf, 0xef, 0x7c, 0x33, 0x81, 0x8f, 0x69, 0x14,
	0x2d, 0x13, 0x16, 0x67, 0xdc, 0x65, 0xcb, 0x3d, 0xe5, 0xc1, 0x92, 0xc6, 0xee, 0x8e, 0x67, 0x6c,
	0xb9, 0x0f, 0x3d, 0xe6, 0xd7, 0xd1, 0x3a, 0x73, 0x17, 0x51, 0x1c, 0x8a, 0x90, 0xf4, 0x4b, 0xe8,
	0xf4, 0xa3, 0x2d, 0x17, 0xbb, 0x74, 0xbd, 0x70, 0xc3, 0xfd, 0x72, 0x1b, 0x6e, 0xc3, 0x25, 0xe6,
	0xd7, 0xe9, 0x06, 0x23, 0x0c, 0xf0, 0x4d, 0xf5, 0xcd, 0xfe, 0xd5, 0xc0, 0xf8, 0x99, 0x7b, 0x2c,
	0xfc, 0x9a, 0xfb, 0xec, 0x79, 0xb0, 0x09, 0xc9, 0x27, 0x30, 0xd8, 0x70, 0x9f, 0x25, 0xfc, 0x2f,
	0x66, 0x6a, 0x53, 0x6d, 0xde, 0xb5, 0x4f, 0x8a, 0xdc, 0xaa, 0xb1, 0xd7, 0xb9, 0xd5, 0xe3, 0x81,
	0x78, 0xf2, 0xd8, 0xa9, 0x21, 0xf2, 0x14, 0x40, 0xf0, 0x3d, 0xf3, 0x59, 0xb0, 0x15, 0x3b, 0xb3,
	0x83, 0x4d, 0x6f, 0x15, 0xb9, 0xd5, 0x42, 0x9b, 0xb6, 0x16, 0x48, 0x2c, 0xe8, 0xd1, 0x1d, 0xa3,
	0x9e, 0xa9, 0x4f, 0xb5, 0xf9, 0xd0, 0x1e, 0x16, 0xb9, 0xa5, 0x00, 0x47, 0x2d, 0xb2, 0x20, 0xc3,
	0x82, 0x6e, 0x53, 0x90, 0xa9, 0x02, 0x5c, 0x66, 0x2f, 0xe0, 0x58, 0x7d, 0x7e, 0x18, 0xef, 0xa9,
	0xa8, 0x49, 0x3c, 0x85, 0x1e, 0x0f, 0x36, 0x61, 0x62, 0x6a, 0x53, 0x7d, 0x3e, 0x3a, 0x7b, 0xb0,
	0x28, 0xe5, 0x59, 0x1c, 0x70, 0x55, 0xfb, 0x61, 0xa1, 0xa3, 0x96, 0xd9, 0x3f, 0x1a, 0x0c, 0xce,
	0x69, 0xb2, 0x7b, 0x2e, 0xd8, 0x9e, 0x58, 0xd0, 0xe1, 0x1e, 0x8a, 0x60, 0xd8, 0x77, 0x8a, 0xdc,
	0xea, 0x70, 0xaf, 0xe1, 0xd1, 0xe1, 0x1e, 0x79, 0x08, 0xfd, 0x35, 0x4d, 0xd8, 0x4f, 0xb1, 0x8f,
	0xac, 0x87, 0xf6, 0x58, 0x4a, 0x25, 0xa1, 0x55, 0x1a, 0xfb, 0x4e, 0x95, 0x24, 0x8f, 0x61, 0xb8,
	0xa6, 0x81, 0xf7, 0x07, 0xf7, 0xc4, 0x0e, 0xb9, 0x1a, 0xf6, 0x83, 0x22, 0xb7, 0x1a, 0xb0, 0xd9,
	0xb6, 0xc1, 0xc8, 0x02, 0xfa, 0x6e, 0xe8, 0x31, 0x97, 0x2b, 0xfa, 0x86, 0x7d, 0xbf, 0xc8, 0xad,
	0x0a, 0x6a, 0x3a, 0x2a, 0x64, 0x96, 0xc1, 0xd8, 0x61, 0x49, 0x14, 0x06, 0x09, 0x93, 0x14, 0xc8,
	0x19, 0xf4, 0x32, 0x49, 0xb7, 0x14, 0xe1, 0x5e, 0x2d, 0x42, 0x45, 0xb0, 0xd4, 0x53, 0xd6, 0x38,
	0x6a, 0x91, 0x3d, 0x34, 0xf5, 0x78, 0x68, 0x76, 0xde, 0xd8, 0x83, 0x35, 0x8e, 0x5a, 0x66, 0x7f,
	0x1f, 0xc1, 0xd8, 0xce, 0x5c, 0x94, 0x16, 0x75, 0xfb, 0x0c, 0x46, 0xec, 0xcf, 0x88, 0xc7, 0x6c,
	0x25, 0x67, 0x5d, 0xba, 0xc8, 0x2c, 0x72, 0xab, 0x0d, 0xb7, 0x1c, 0xa1, 0xd0, 0x1f, 0xf9, 0x9e,
	0x91, 0x19, 0xe8, 0x92, 0x6f, 0x07, 0xf9, 0xde, 0x2d, 0x72, 0x4b, 0x3f, 0xe0, 0x2a, 0x23, 0xf2,
	0x0c, 0xee, 0x24, 0x69, 0x14, 0x85, 0xb1, 0x58, 0xfd, 0x9e, 0x52, 0x9f, 0x8b, 0x0b, 0x53, 0x9f,
	0xea, 0x73, 0xc3, 0x3e, 0x2d, 0x72, 0xeb, 0x7a, 0xea, 0x75, 0x6e, 0xe9, 0x3c, 0x10, 0xce, 0xed,
	0x12, 0xff, 0x41, 0xc1, 0xe4, 0x8b, 0x66, 0x93, 0x0d, 0x7a, 0x27, 0x31, 0xbb, 0x53, 0x7d, 0x3e,
	0xb4, 0x8f, 0xdb, 0x9b, 0x94, 0xa9, 0xba, 0x5b, 0xd9, 0x2c, 0x21, 0xdf, 0xc0, 0x71, 0x55, 0xe2,
	0xb1, 0xc4, 0x8d, 0x79, 0x24, 0x78, 0x18, 0x98, 0x3d, 0xdc, 0x41, 0x5a, 0xff, 0xa6, 0xb4, 0x43,
	0x4a, 0xf0, 0xbc, 0xc1, 0xc8, 0x87, 0xd0, 0xaf, 0x48, 0x1c, 0x21, 0x69, 0x22, 0x87, 0x7c, 0xed,
	0xe3, 0xab, 0x98, 0xbc, 0x0d, 0x7a, 0x1a, 0xfb, 0x66, 0x1f, 0xcd, 0xd6, 0x97, 0xf2, 0x48, 0x9f,
	0xc9, 0x07, 0xf9, 0x0e, 0x86, 0xf2, 0x40, 0xae, 0xa4, 0x8f, 0xcd, 0x01, 0x4e, 0xef, 0xbd, 0x7a,
	0x7a, 0xed, 0xf1, 0x2c, 0x2a, 0xfb, 0x7f, 0x15, 0x88, 0xf8, 0xc2, 0x36, 0xa4, 0x11, 0xeb, 0x4e,
	0x75, 0xaa, 0xf1, 0x0c, 0x3d, 0x01, 0x03, 0x3d, 0xb1, 0xaa, 0x4c, 0x38, 0xc4, 0xef, 0xbb, 0x57,
	0xe4, 0xd6, 0x61, 0xc2, 0x19, 0x63, 0xf8, 0x4c, 0x45, 0x4d, 0x5f, 0x14, 0x87, 0xbf, 0x32, 0x57,
	0x98, 0x30, 0xd5, 0xe6, 0x83, 0x76, 0x5f, 0x99, 0x28, 0xfb, 0xbe, 0x57, 0x11, 0x79, 0x08, 0xbd,
	0x4d, 0x90, 0xb1, 0xd8, 0x1c, 0xd5, 0xc3, 0x57, 0x40, 0xa5, 0x82, 0x8a, 0xca, 0x3a, 0xea, 0x9b,
	0xe3, 0x83, 0x3a, 0xea, 0xb7, 0xeb, 0xa8, 0x4f, 0x1e, 0x41, 0xd7, 0xa3, 0xc9, 0xce, 0x34, 0xa6,
	0xda, 0x7c, 0x74, 0x76, 0x52, 0x6b, 0xd1, 0x3e, 0x23, 0xf6, 0xa0, 0xc8, 0x2d, 0x2c, 0x73, 0xf0,
	0x79, 0xfa, 0x0b, 0x18, 0x07, 0xf2, 0x90, 0xbb, 0xa0, 0xff, 0xc6, 0x2e, 0xd4, 0x25, 0xe0, 0xc8,
	0x57, 0x3c, 0x56, 0xd4, 0x4f, 0x19, 0x9a, 0x74, 0x74, 0xf6, 0xce, 0xb5, 0xbb, 0xe5, 0xe0, 0x22,
	0x72, 0x54, 0xe9, 0xe7, 0x9d, 0x4f, 0xb5, 0xd9, 0xa5, 0x06, 0xb7, 0xed, 0xcc, 0xad, 0x7e, 0xfe,
	0xdb, 0x64, 0x4b, 0xde, 0x87, 0xae, 0xd4, 0xb0, 0xbc, 0x62, 0xa4, 0x42, 0x18, 0x37, 0x7e, 0xc7,
	0x90, 0x7c, 0x29, 0x99, 0x08, 0x5a, 0x9e, 0xc9, 0x77, 0xdb, 0x53, 0x6d, 0xed, 0xb6, 0x38, 0xa7,
	0x82, 0xaa, 0x99, 0x96, 0xac, 0x04, 0x75, 0xf0, 0x79, 0xfa, 0x02, 0x86, 0x75, 0xf2, 0x06, 0x46,
	0x1f, 0x1c, 0x32, 0x3a, 0xb9, 0xd1, 0x36, 0x2d, 0x2a, 0xf6, 0xfd, 0xcb, 0x57, 0x93, 0x5b, 0x2f,
	0x5f, 0x4d, 0x6e, 0x5d, 0x5e, 0x4d, 0xb4, 0x97, 0x57, 0x13, 0xed, 0xbf, 0xab, 0x89, 0xb6, 0x3e,
	0xc2, 0xbf, 0x94, 0x47, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xdd, 0x32, 0xdc, 0xbe, 0x06,
	0x00, 0x00,
}

func (m *VideoFileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoFileInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoFileInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Vhead) > 0 {
		i -= len(m.Vhead)
		copy(dAtA[i:], m.Vhead)
		i = encodeVarintBvc(dAtA, i, uint64(len(m.Vhead)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Ahead) > 0 {
		i -= len(m.Ahead)
		copy(dAtA[i:], m.Ahead)
		i = encodeVarintBvc(dAtA, i, uint64(len(m.Ahead)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timelength != 0 {
		i = encodeVarintBvc(dAtA, i, uint64(m.Timelength))
		i--
		dAtA[i] = 0x10
	}
	if m.Filesize != 0 {
		i = encodeVarintBvc(dAtA, i, uint64(m.Filesize))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VideoFormatFileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VideoFormatFileInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VideoFormatFileInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Infos) > 0 {
		for iNdEx := len(m.Infos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Infos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBvc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DashItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DashItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DashItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Codecid != 0 {
		i = encodeVarintBvc(dAtA, i, uint64(m.Codecid))
		i--
		dAtA[i] = 0x20
	}
	if m.Bandwidth != 0 {
		i = encodeVarintBvc(dAtA, i, uint64(m.Bandwidth))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BaseUrl) > 0 {
		i -= len(m.BaseUrl)
		copy(dAtA[i:], m.BaseUrl)
		i = encodeVarintBvc(dAtA, i, uint64(len(m.BaseUrl)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBvc(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResponseDash) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseDash) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResponseDash) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Audio) > 0 {
		for iNdEx := len(m.Audio) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Audio[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBvc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Video) > 0 {
		for iNdEx := len(m.Video) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Video[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBvc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BvcVideoItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BvcVideoItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BvcVideoItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Dash != nil {
		{
			size, err := m.Dash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBvc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Fnval != 0 {
		i = encodeVarintBvc(dAtA, i, uint64(m.Fnval))
		i--
		dAtA[i] = 0x60
	}
	if m.Fnver != 0 {
		i = encodeVarintBvc(dAtA, i, uint64(m.Fnver))
		i--
		dAtA[i] = 0x58
	}
	if m.VideoProject {
		i--
		if m.VideoProject {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.VideoCodecid != 0 {
		i = encodeVarintBvc(dAtA, i, uint64(m.VideoCodecid))
		i--
		dAtA[i] = 0x48
	}
	if len(m.FileInfo) > 0 {
		for k := range m.FileInfo {
			v := m.FileInfo[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintBvc(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintBvc(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintBvc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintBvc(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Quality != 0 {
		i = encodeVarintBvc(dAtA, i, uint64(m.Quality))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SupportDescription) > 0 {
		for iNdEx := len(m.SupportDescription) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SupportDescription[iNdEx])
			copy(dAtA[i:], m.SupportDescription[iNdEx])
			i = encodeVarintBvc(dAtA, i, uint64(len(m.SupportDescription[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SupportFormats) > 0 {
		for iNdEx := len(m.SupportFormats) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SupportFormats[iNdEx])
			copy(dAtA[i:], m.SupportFormats[iNdEx])
			i = encodeVarintBvc(dAtA, i, uint64(len(m.SupportFormats[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SupportQuality) > 0 {
		dAtA4 := make([]byte, len(m.SupportQuality)*10)
		var j3 int
		for _, num := range m.SupportQuality {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintBvc(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if m.Cid != 0 {
		i = encodeVarintBvc(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.ExpireTime != 0 {
		i = encodeVarintBvc(dAtA, i, uint64(m.ExpireTime))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BvcResponseMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BvcResponseMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BvcResponseMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintBvc(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintBvc(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintBvc(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Code != 0 {
		i = encodeVarintBvc(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBvc(dAtA []byte, offset int, v uint64) int {
	offset -= sovBvc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VideoFileInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Filesize != 0 {
		n += 1 + sovBvc(uint64(m.Filesize))
	}
	if m.Timelength != 0 {
		n += 1 + sovBvc(uint64(m.Timelength))
	}
	l = len(m.Ahead)
	if l > 0 {
		n += 1 + l + sovBvc(uint64(l))
	}
	l = len(m.Vhead)
	if l > 0 {
		n += 1 + l + sovBvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VideoFormatFileInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Infos) > 0 {
		for _, e := range m.Infos {
			l = e.Size()
			n += 1 + l + sovBvc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DashItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBvc(uint64(m.Id))
	}
	l = len(m.BaseUrl)
	if l > 0 {
		n += 1 + l + sovBvc(uint64(l))
	}
	if m.Bandwidth != 0 {
		n += 1 + sovBvc(uint64(m.Bandwidth))
	}
	if m.Codecid != 0 {
		n += 1 + sovBvc(uint64(m.Codecid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ResponseDash) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Video) > 0 {
		for _, e := range m.Video {
			l = e.Size()
			n += 1 + l + sovBvc(uint64(l))
		}
	}
	if len(m.Audio) > 0 {
		for _, e := range m.Audio {
			l = e.Size()
			n += 1 + l + sovBvc(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BvcVideoItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ExpireTime != 0 {
		n += 1 + sovBvc(uint64(m.ExpireTime))
	}
	if m.Cid != 0 {
		n += 1 + sovBvc(uint64(m.Cid))
	}
	if len(m.SupportQuality) > 0 {
		l = 0
		for _, e := range m.SupportQuality {
			l += sovBvc(uint64(e))
		}
		n += 1 + sovBvc(uint64(l)) + l
	}
	if len(m.SupportFormats) > 0 {
		for _, s := range m.SupportFormats {
			l = len(s)
			n += 1 + l + sovBvc(uint64(l))
		}
	}
	if len(m.SupportDescription) > 0 {
		for _, s := range m.SupportDescription {
			l = len(s)
			n += 1 + l + sovBvc(uint64(l))
		}
	}
	if m.Quality != 0 {
		n += 1 + sovBvc(uint64(m.Quality))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovBvc(uint64(l))
	}
	if len(m.FileInfo) > 0 {
		for k, v := range m.FileInfo {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBvc(uint64(l))
			}
			mapEntrySize := 1 + sovBvc(uint64(k)) + l
			n += mapEntrySize + 1 + sovBvc(uint64(mapEntrySize))
		}
	}
	if m.VideoCodecid != 0 {
		n += 1 + sovBvc(uint64(m.VideoCodecid))
	}
	if m.VideoProject {
		n += 2
	}
	if m.Fnver != 0 {
		n += 1 + sovBvc(uint64(m.Fnver))
	}
	if m.Fnval != 0 {
		n += 1 + sovBvc(uint64(m.Fnval))
	}
	if m.Dash != nil {
		l = m.Dash.Size()
		n += 1 + l + sovBvc(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BvcResponseMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovBvc(uint64(m.Code))
	}
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBvc(uint64(l))
			}
			mapEntrySize := 1 + sovBvc(uint64(k)) + l
			n += mapEntrySize + 1 + sovBvc(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBvc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBvc(x uint64) (n int) {
	return sovBvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VideoFileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoFileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoFileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filesize", wireType)
			}
			m.Filesize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Filesize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timelength", wireType)
			}
			m.Timelength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timelength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ahead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ahead = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vhead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vhead = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VideoFormatFileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VideoFormatFileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VideoFormatFileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Infos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Infos = append(m.Infos, &VideoFileInfo{})
			if err := m.Infos[len(m.Infos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DashItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DashItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DashItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bandwidth", wireType)
			}
			m.Bandwidth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bandwidth |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Codecid", wireType)
			}
			m.Codecid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Codecid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseDash) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseDash: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseDash: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Video", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Video = append(m.Video, &DashItem{})
			if err := m.Video[len(m.Video)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Audio", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Audio = append(m.Audio, &DashItem{})
			if err := m.Audio[len(m.Audio)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BvcVideoItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BvcVideoItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BvcVideoItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SupportQuality = append(m.SupportQuality, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBvc
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBvc
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SupportQuality) == 0 {
					m.SupportQuality = make([]int, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SupportQuality = append(m.SupportQuality, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportQuality", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportFormats", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportFormats = append(m.SupportFormats, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportDescription = append(m.SupportDescription, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileInfo == nil {
				m.FileInfo = make(map[uint32]*VideoFormatFileInfo)
			}
			var mapkey uint32
			var mapvalue *VideoFormatFileInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBvc
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthBvc
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &VideoFormatFileInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBvc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBvc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.FileInfo[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoCodecid", wireType)
			}
			m.VideoCodecid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VideoCodecid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VideoProject", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VideoProject = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnver", wireType)
			}
			m.Fnver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnver |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnval", wireType)
			}
			m.Fnval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fnval |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dash == nil {
				m.Dash = &ResponseDash{}
			}
			if err := m.Dash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BvcResponseMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BvcResponseMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BvcResponseMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[uint32]*BvcVideoItem)
			}
			var mapkey uint32
			var mapvalue *BvcVideoItem
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBvc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBvc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBvc
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthBvc
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BvcVideoItem{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBvc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthBvc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBvc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBvc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBvc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBvc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBvc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBvc = fmt.Errorf("proto: unexpected end of group")
)
