// Code generated by protoc-gen-bm v0.1, DO NOT EDIT.
// source: api.proto

/*
Package v1 is a generated blademaster stub package.
This code was generated with go-common/app/tool/bmgen/protoc-gen-bm v0.1.

It is generated from these files:
	api.proto
*/
package v1

import (
	"context"

	bm "go-common/library/net/http/blademaster"
	"go-common/library/net/http/blademaster/binding"
)

// to suppressed 'imported but not used warning'
var _ *bm.Context
var _ context.Context
var _ binding.StructValidator

var PathIdentifyGetCookieInfo = "/passport.service.identify.v1.Identify/GetCookieInfo"
var PathIdentifyGetTokenInfo = "/passport.service.identify.v1.Identify/GetTokenInfo"

// ==================
// Identify Interface
// ==================

type IdentifyBMServer interface {
	// CookieInfo identify info by cookie.
	GetCookieInfo(ctx context.Context, req *GetCookieInfoReq) (resp *GetCookieInfoReply, err error)

	// TokenInfo identify info by token.
	GetTokenInfo(ctx context.Context, req *GetTokenInfoReq) (resp *GetTokenInfoReply, err error)
}

var v1IdentifySvc IdentifyBMServer

func identifyGetCookieInfo(c *bm.Context) {
	p := new(GetCookieInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := v1IdentifySvc.GetCookieInfo(c, p)
	c.JSON(resp, err)
}

func identifyGetTokenInfo(c *bm.Context) {
	p := new(GetTokenInfoReq)
	if err := c.BindWith(p, binding.Default(c.Request.Method, c.Request.Header.Get("Content-Type"))); err != nil {
		return
	}
	resp, err := v1IdentifySvc.GetTokenInfo(c, p)
	c.JSON(resp, err)
}

// RegisterIdentifyBMServer Register the blademaster route
func RegisterIdentifyBMServer(e *bm.Engine, server IdentifyBMServer) {
	v1IdentifySvc = server
	e.GET("/passport.service.identify.v1.Identify/GetCookieInfo", identifyGetCookieInfo)
	e.GET("/passport.service.identify.v1.Identify/GetTokenInfo", identifyGetTokenInfo)
}
